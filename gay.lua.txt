-- SaveManager.lua
local httpService = game:GetService("HttpService")
local Players = game:GetService("Players")

local SaveManager = {}
do
    SaveManager.Folder = "FluentConfig"
    SaveManager.Ignore = {}
    
    SaveManager.Parser = {
        Toggle = {
            Save = function(idx, object) 
                return { type = "Toggle", idx = idx, value = object.Value } 
            end,
            Load = function(idx, data)
                if SaveManager.Options[idx] then 
                    SaveManager.Options[idx]:SetValue(data.value)
                end
            end,
        },
        Slider = {
            Save = function(idx, object)
                return { type = "Slider", idx = idx, value = object.Value }
            end,
            Load = function(idx, data)
                if SaveManager.Options[idx] then 
                    SaveManager.Options[idx]:SetValue(data.value)
                end
            end,
        },
        Dropdown = {
            Save = function(idx, object)
                return { type = "Dropdown", idx = idx, value = object.Value }
            end,
            Load = function(idx, data)
                if SaveManager.Options[idx] then 
                    SaveManager.Options[idx]:SetValue(data.value)
                end
            end,
        },
        Input = {
            Save = function(idx, object)
                return { type = "Input", idx = idx, text = object.Value }
            end,
            Load = function(idx, data)
                if SaveManager.Options[idx] then 
                    SaveManager.Options[idx]:SetValue(data.text)
                end
            end,
        }
    }

    function SaveManager:BuildFolderTree()
        -- KI·ªÇM TRA NG∆Ø·ª¢C: N·∫æU KH√îNG C√ì FOLDER TH√å T·∫†O
        if not isfolder(self.Folder) then
            makefolder(self.Folder)
            print("üìÅ Created folder:", self.Folder)
        end
    end

    function SaveManager:AutoCreateConfig()
        local playerName = Players.LocalPlayer.Name
        local configPath = self.Folder .. "/" .. playerName .. ".json"
        
        -- KI·ªÇM TRA V√Ä T·∫†O FOLDER
        self:BuildFolderTree()
        
        -- KI·ªÇM TRA NG∆Ø·ª¢C: N·∫æU KH√îNG C√ì CONFIG FILE TH√å T·∫†O M·ªöI
        if not isfile(configPath) then
            -- Ch∆∞a c√≥ config, t·∫°o m·ªõi
            self:Save()
            print("‚úÖ Created new config for:", playerName)
        else
            -- ƒê√£ c√≥ config, ch·ªâ c·∫ßn load
            self:Load()
            print("‚úÖ Loaded existing config for:", playerName)
        end
    end

    function SaveManager:SetFolder(folder)
        self.Folder = folder
    end

    function SaveManager:Save()
        local playerName = Players.LocalPlayer.Name
        local configPath = self.Folder .. "/" .. playerName .. ".json"
        
        -- KI·ªÇM TRA FOLDER TR∆Ø·ªöC KHI SAVE
        self:BuildFolderTree()
        
        local data = { objects = {} }

        for idx, option in next, self.Options do
            if self.Parser[option.Type] and not self.Ignore[idx] then
                table.insert(data.objects, self.Parser[option.Type].Save(idx, option))
            end
        end

        local success, encoded = pcall(httpService.JSONEncode, httpService, data)
        if not success then 
            warn("‚ùå Save failed: encode error")
            return false, "encode failed" 
        end

        writefile(configPath, encoded)
        print("üíæ Auto-saved config for:", playerName)
        return true
    end

    function SaveManager:Load()
        local playerName = Players.LocalPlayer.Name
        local configPath = self.Folder .. "/" .. playerName .. ".json"
        
        -- KI·ªÇM TRA NG∆Ø·ª¢C: N·∫æU KH√îNG C√ì FILE CONFIG TH√å B√ÅO L·ªñI
        if not isfile(configPath) then
            warn("‚ùå Load failed: config file not found")
            return false, "file not found" 
        end

        local success, decoded = pcall(httpService.JSONDecode, httpService, readfile(configPath))
        if not success then 
            warn("‚ùå Load failed: decode error")
            return false, "decode failed" 
        end

        for _, option in next, decoded.objects do
            if self.Parser[option.type] then
                task.spawn(function()
                    self.Parser[option.type].Load(option.idx, option)
                end)
            end
        end
        return true
    end

    function SaveManager:SetLibrary(library)
        self.Library = library
        self.Options = library.Options
        
        -- THI·∫æT L·∫¨P AUTOSAVE
        self:SetupAutoSave()
        
        -- T·ª∞ ƒê·ªòNG T·∫†O/LOAD CONFIG
        task.spawn(function()
            wait(2) -- Ch·ªù UI load xong
            self:AutoCreateConfig()
        end)
    end

    function SaveManager:SetupAutoSave()
        for idx, option in next, self.Options do
            -- KI·ªÇM TRA NG∆Ø·ª¢C: N·∫æU KH√îNG PH·∫¢I L√Ä IGNORE V√Ä C√ì PARSER
            if not self.Ignore[idx] and self.Parser[option.Type] then
                if option.Type == "Toggle" then
                    option:OnChanged(function()
                        self:AutoSave()
                    end)
                elseif option.Type == "Slider" then
                    option:OnChanged(function()
                        self:AutoSave()
                    end)
                elseif option.Type == "Dropdown" then
                    option:OnChanged(function()
                        self:AutoSave()
                    end)
                elseif option.Type == "Input" then
                    -- Debounce cho Input ƒë·ªÉ tr√°nh l∆∞u li√™n t·ª•c khi ƒëang g√µ
                    local debounce = false
                    option:OnChanged(function()
                        if not debounce then
                            debounce = true
                            task.spawn(function()
                                wait(1) -- Ch·ªù 1 gi√¢y sau khi ng·ª´ng g√µ
                                self:AutoSave()
                                debounce = false
                            end)
                        end
                    end)
                end
            end
        end
    end

    function SaveManager:AutoSave()
        task.spawn(function()
            self:Save()
        end)
    end

    function SaveManager:IgnoreThemeSettings()
        self.Ignore = {
            ["InterfaceTheme"] = true,
            ["AcrylicToggle"] = true,
            ["TransparentToggle"] = true,
            ["MenuKeybind"] = true
        }
    end
end

return SaveManager